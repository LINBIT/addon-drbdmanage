#!/bin/bash
#
#==========================================================================
# Copyright 2016 LINBIT USA LCC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#==========================================================================

SRC=$1
DST=$2
VM_ID=$3
DS_ID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON="${ONE_LOCATION}"/var/remotes/tm/tm_common.sh
fi

source "$TMCOMMON"

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbdmanage.conf
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbd_common.sh
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
source "${DRIVER_PATH}"/eXtract.sh

SRC=`fix_dir_slashes $SRC`
DST=`fix_dir_slashes $DST`

drbd_log "Beginning mv action."
# Determine the source, host, and the location of the images.
SRC_HOST=$(arg_host "$SRC")
SRC_PATH=$(arg_path "$SRC")
SRC_DS_DIR=`dirname  $SRC_PATH`
SRC_VM_DIR=`basename $SRC_PATH`
DISK_ID=$(eXtract_disk_id_from_path "$SRC_PATH" | xargs)
if [ -z "$DISK_ID" ]; then
  DISK_IDS=( $(eXtract_disk_ids "$VM_ID" | xargs) )
else
  DISK_IDS=( $DISK_ID )
fi


DST_HOST=$(arg_host "$DST")
DST_PATH=$(arg_path "$DST")
DST_DIR=$(dirname "$DST_PATH")

# Exit if we're not actually moving anything.
if [ "$SRC" == "$DST" ]; then
  drbd_log "$SRC and $DST are the same, exiting."

  exit 0
fi

# Make a new path for the dst_host, remove the src_host's path.
ssh_make_path "$DST_HOST" "$DST_DIR"

(ssh_exec_and_log "$SRC_HOST" "rm -rf $SRC_PATH" \
  "Error removing $SRC_PATH on $SRC_HOST")

BRIDGE_LIST=$(eXtract_datastore_param "$DS_ID" "BRIDGE_LIST")
DRBD_SUPPORT_LIVE_MIGRATION=$(eXtract_datastore_param "$DS_ID" "DRBD_SUPPORT_LIVE_MIGRATION")
DRBD_MIN_RATIO=$(eXtract_datastore_param "$DS_ID" "DRBD_MIN_RATIO")
DRBD_MIN_COUNT=$(eXtract_datastore_param "$DS_ID" "DRBD_MIN_COUNT")

for DISK_ID in "${DISK_IDS[@]}"
do
  DRBD_RES_NAME=$(eXtract_disk_param "$VM_ID" "$DISK_ID" "SOURCE")
  TARGET=$(eXtract_disk_param "$VM_ID" "$DISK_ID" "TARGET")
  PERSISTENT=$(eXtract_disk_param "$VM_ID" "$DISK_ID" "PERSISTENT")
  TYPE=$(eXtract_disk_param "$VM_ID" "$DISK_ID" "TYPE")

  drbd_log "Moving $TARGET"

  if [ -z "$PERSISTENT" ]; then
    if [ $TYPE == "CDROM" ]; then
      drbd_log "$DRBD_RES_NAME is a non-persistent CDROM image"
    else
      DRBD_RES_NAME="${DRBD_RES_NAME}-vm${VM_ID}-disk${DISK_ID}"
      drbd_log "$DRBD_RES_NAME is a non-persistent OS or DATABLOCK image"
    fi
  else
      drbd_log "$DRBD_RES_NAME is a persistent OS, CDROM or DATABLOCK image"
  fi

  # Assign res to dest.
  drbd_deploy_res_on_host "$DRBD_RES_NAME" "$DST_HOST"

  # Get Device path and make sure it's ready for IO.
  DRBD_DEVICE_PATH=$(drbd_get_device_for_res "$DRBD_RES_NAME")

  exec_and_log "drbd_is_node_ready $DST_HOST $DRBD_DEVICE_PATH" \
    "DRBD device at $DRBD_DEVICE_PATH not ready for IO on $DST_HOST, drbdsetup status: $(drbdsetup status --color=never $DRBD_RES_NAME)"

  # If the source is a not storage node and
  # live migrations are not enabled, unassign res from src.
  if [ "$(drbd_is_node_in_list "$SRC_HOST" $BRIDGE_LIST)" -ne 0 ] &&
     [ "$DRBD_SUPPORT_LIVE_MIGRATION" != "yes" ]; then
    drbd_unassign_res "$DRBD_RES_NAME" "$SRC_HOST"
  fi

  # Link DRBD device to datastore location.
  LINK_COMMAND=$(cat <<EOF
      set -e

      ln -fs "$DRBD_DEVICE_PATH" "$DST_PATH"
EOF
  )

  ssh_exec_and_log "$DST_HOST" "$LINK_COMMAND" \
            "Error: Unable to link $DRBD_RES_NAME to $DST_PATH on $DST_HOST"

  drbd_log "Ending mv action."

done

exit 0
