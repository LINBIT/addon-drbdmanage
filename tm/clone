#!/bin/bash
#
#==========================================================================
# Copyright 2016 LINBIT USA LCC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#==========================================================================

SRC=$1
DST=$2

VM_ID=$3
DS_ID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON="${ONE_LOCATION}"/var/remotes/tm/tm_common.sh
fi

source "$TMCOMMON"

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbdmanage.conf
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbd_common.sh

drbd_log "Beginning clone action."

DST=`fix_dir_slashes $DST`
# Get virtualization host information
DST_PATH=$(arg_path "$DST")
SRC_PATH=$(arg_path "$SRC")
DST_HOST=$(arg_host "$DST")
DST_DIR=$(dirname "$DST_PATH")
DISK_ID=$(echo "$DST_PATH" | $AWK -F. '{print $NF}')

# Get custom datastore values
XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"
source "${DRIVER_PATH}"/eXtract.sh
DRBD_SUPPORT_LIVE_MIGRATION=$(eXtract_datastore_param "$DS_ID" "DRBD_SUPPORT_LIVE_MIGRATION")
DRBD_DEPLOYMENT_SITE=$(eXtract_datastore_param "$DS_ID" "DRBD_DEPLOYMENT_SITE")
DRBD_MIN_RATIO=$(eXtract_datastore_param "$DS_ID" "DRBD_MIN_RATIO")
DRBD_MIN_COUNT=$(eXtract_datastore_param "$DS_ID" "DRBD_MIN_COUNT")

# Check for valid configuration.
exec_and_log "drbd_deploy_options_check" \
  "You must have only one of the following in the template \
  for your datastore: DRBD_REDUNDANCY DRBD_DEPLOYMENT_NODES"

# Get new (cloned) resource name and original resource name.
DRBD_CLONE_NAME="${SRC_PATH}-vm${VM_ID}-disk${DISK_ID}"
DRBD_RES_NAME="$SRC_PATH"

# Create new resource from DRBD_RES_NAME
exec_and_log "drbd_clone_res $DRBD_CLONE_NAME $DRBD_RES_NAME" \
  "Error creating clone from $DRBD_RES_NAME"

# Assign cloned resource to host.
drbd_deploy_res_on_host "$DRBD_CLONE_NAME" "$DST_HOST"

# Distribute resource to remaning nodes if live migration is enabled.
if [ "$DRBD_SUPPORT_LIVE_MIGRATION" = "yes" ];then
  drbd_distribute_clients "$DRBD_RES_NAME"
fi
# Get Device path and make sure it's ready for IO.
DRBD_DEVICE_PATH=$(drbd_get_device_for_res "$DRBD_CLONE_NAME")

exec_and_log "drbd_is_node_ready $DST_HOST $DRBD_DEVICE_PATH" \
  "DRBD device at $DRBD_DEVICE_PATH not ready for IO on $DST_HOST, drbdsetup status: $(drbdsetup status --color=never $DRBD_RES_NAME)"

# Link DRBD device to datastore location.
LINK_COMMAND=$(cat <<EOF
    set -e

    mkdir -p "$DST_DIR"

    ln -fs "$DRBD_DEVICE_PATH" "$DST_PATH"
EOF
)

ssh_exec_and_log "$DST_HOST" "$LINK_COMMAND" \
          "Error: Unable to link $DRBD_CLONE_NAME to $DST_PATH on $DST_HOST"

# Distribute resource to remaning nodes if live migration is enabled.
if [ "$DRBD_SUPPORT_LIVE_MIGRATION" = "yes" ];then
  drbd_distribute_clients "$DRBD_CLONE_NAME"
fi

drbd_log "Ending clone action."

exit 0
