#!/bin/bash

# Set up environment
if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON="${ONE_LOCATION}"/var/remotes/tm/tm_common.sh
fi

source "$TMCOMMON"

DRIVER_PATH=$(dirname "$0")
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbdmanage.conf
source "${DRIVER_PATH}"/../../datastore/drbdmanage/drbd_common.sh

function exit_error
{
    error_message "$ERROR"
    drbd_log "$ERROR"
    [ -d "$ISO_DIR" ] && rm -rf "$ISO_DIR" > /dev/null 2>&1
    exit -1
}

ARGV=("$@")

DS_ID="${ARGV[$(($#-1))]}"
VM_ID="${ARGV[$(($#-2))]}"
DST="${ARGV[$(($#-3))]}"
SRC=("${ARGV[@]:0:$(($#-3))}")
DISK_ID=$(echo $DST | awk -F. '{print $NF}')

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb"

unset i j XPATH_ELEMENTS
while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
    done < <(onedatastore show -x "$DS_ID" | sed '/\/>$/d' | "$XPATH" --stdin \
                        /DATASTORE/TYPE \
                        /DATASTORE/BASE_PATH \
                        /DATASTORE/TEMPLATE/DRBD_REDUNDANCY \
                        /DATASTORE/TEMPLATE/DRBD_DEPLOYMENT_SITE \
                        /DATASTORE/TEMPLATE/DRBD_DEPLOYMENT_NODES)

DS_TYPE="${XPATH_ELEMENTS[j++]}"
DS_BASE_PATH="${XPATH_ELEMENTS[j++]}"
DRBD_REDUNDANCY="${XPATH_ELEMENTS[j++]}"
DRBD_DEPLOYMENT_SITE="${XPATH_ELEMENTS[j++]}"
DRBD_DEPLOYMENT_NODES="${XPATH_ELEMENTS[j++]}"

#-------------------------------------------------------------------------------
# Set dst path and dirs
#-------------------------------------------------------------------------------

DST_PATH=`arg_path $DST`
DST_HOST=`arg_host $DST`
DST_DIR=`dirname $DST_PATH`




# Check for valid configuration.
exec_and_log "drbd_deploy_options_check" \
  "You must have only one of the following in the template \
  for your datastore: DRBD_REDUNDANCY DRBD_DEPLOYMENT_NODES"


#-------------------------------------------------------------------------------
# Build the Context Block device (locally) and copy it remotely
#-------------------------------------------------------------------------------

log "Generating context block device"

ISO_DIR="$DS_BASE_PATH/.isofiles/$VM_ID"
ISO_FILE="$ISO_DIR/$VM_ID.iso"

exec_and_set_error "mkdir -p $ISO_DIR" \
    "Could not create tmp dir to make context dev"
[ -n "$ERROR" ] && exit_error

for f in "${SRC[@]}"; do
    case "$f" in
    http://*)
        exec_and_set_error "$WGET -P '$ISO_DIR' $f" "Error downloading $f"
        ;;
    *)
        if echo "$f" | grep -q ':'; then
            target=$(echo "$f"|cut -d':' -f2-)
            target="'$target'"
            f=$(echo "$f"|cut -d':' -f1)
        else
            target=""
        fi

        exec_and_set_error "cp -R $f $ISO_DIR/$target" \
            "Error copying $f to $ISO_DIR"
        ;;
    esac

    [ -n "$ERROR" ] && exit_error
done

exec_and_set_error "$MKISOFS -o $ISO_FILE -V CONTEXT -J -R $ISO_DIR" \
    "Error creating iso fs"
[ -n "$ERROR" ] && exit_error

SIZE=$(${DU} -s -0 ${ISO_FILE} | ${AWK} '{print $1/1024}' | ${AWK} -F'.' '{print $1+1}')

# Get the name and size for a DRBD resource.
DRBD_SIZE="${SIZE}M"
DRBD_RES_NAME="OpenNebula-vm-context-vm${VM_ID}-disk${DISK_ID}"

# Check size of the new resource for redundant deployments.
if [ -n "$DRBD_REDUNDANCY" ]; then
  exec_and_log "drbd_size_check $SIZE" \
    "Unable to find $DRBD_REDUNDANCY storage nodes with enough \
    free space to hold a new $DRBD_SIZE volume."
fi

# delete resource if already exists
if [ "$(drbd_res_exsists "$DRBD_RES_NAME")" = "$DRBD_RES_NAME" ]; then
    drbd_remove_res "$DRBD_RES_NAME"
fi

drbd_log "Creating a new $DRBD_SIZE resource $DRBD_RES_NAME"

drbd_add_res "$DRBD_RES_NAME" "$DRBD_SIZE"

if [ "$(drbd_deploy_res_on_nodes "$DRBD_RES_NAME")" -ne 0 ]; then
  error_message "Unable to deploy $DRBD_RES_NAME"

  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
fi

# Get the location of the DRBD device node.
DRBD_DEVICE_PATH=$(drbd_get_device_for_res "$DRBD_RES_NAME")

# Distribute resource to remaning nodes if live migration is enabled.
if [ "$DRBD_SUPPORT_LIVE_MIGRATION" = "yes" ];then
  drbd_distribute_clients "$DRBD_RES_NAME"
fi

exec_and_log "drbd_is_dev_ready $DRBD_DEVICE_PATH $DRBD_TIMEOUT" \
  "DRBD device at $DRBD_DEVICE_PATH not ready for IO, drbdsetup status: $(drbdsetup status --color=never ${DRBD_RES_NAME})"

$(exec_and_log "${DD} if=${ISO_FILE} of=${DRBD_DEVICE_PATH} bs=2M" "Unable to copy context iso '${ISO_FILE}' to drbd device '${DRBD_DEVICE_PATH}'")

if [ $? -ne 0 ]; then
  # Clean up resource.
  drbd_remove_res "$DRBD_RES_NAME"
  exit -1
else
  drbd_log "Context iso copying finished successfully"
fi

# Link DRBD device to datastore location.
LINK_COMMAND=$(cat <<EOF
    set -e

    mkdir -p $DST_DIR

    ln -fs "$DRBD_DEVICE_PATH" "$DST_PATH"
EOF
)

ssh_exec_and_log "$DST_HOST" "$LINK_COMMAND" \
          "Error: Unable to link $DRBD_RES_NAME to $DST_PATH on $DST_HOST"


rm -rf $ISO_DIR > /dev/null 2>&1

exit 0
